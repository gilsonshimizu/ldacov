// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// whichLessDVPresence
int whichLessDVPresence(double value, NumericVector prob);
RcppExport SEXP _ldacov_whichLessDVPresence(SEXP valueSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(whichLessDVPresence(value, prob));
    return rcpp_result_gen;
END_RCPP
}
// ldmultinom
double ldmultinom(NumericVector x, double size, NumericVector lprob);
RcppExport SEXP _ldacov_ldmultinom(SEXP xSEXP, SEXP sizeSEXP, SEXP lprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lprob(lprobSEXP);
    rcpp_result_gen = Rcpp::wrap(ldmultinom(x, size, lprob));
    return rcpp_result_gen;
END_RCPP
}
// LogLikMultin
NumericVector LogLikMultin(int nloc, int ncomm, int nspp, NumericMatrix LogPhi, NumericVector Arraylsk);
RcppExport SEXP _ldacov_LogLikMultin(SEXP nlocSEXP, SEXP ncommSEXP, SEXP nsppSEXP, SEXP LogPhiSEXP, SEXP ArraylskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nloc(nlocSEXP);
    Rcpp::traits::input_parameter< int >::type ncomm(ncommSEXP);
    Rcpp::traits::input_parameter< int >::type nspp(nsppSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LogPhi(LogPhiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Arraylsk(ArraylskSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLikMultin(nloc, ncomm, nspp, LogPhi, Arraylsk));
    return rcpp_result_gen;
END_RCPP
}
// SampleArray
List SampleArray(NumericVector Arraylsk, int nloc, int nspp, int ncomm, double NBN, IntegerMatrix y, NumericMatrix LogPhi, NumericMatrix LogOneMinusP, NumericVector runif1, IntegerMatrix nlk);
RcppExport SEXP _ldacov_SampleArray(SEXP ArraylskSEXP, SEXP nlocSEXP, SEXP nsppSEXP, SEXP ncommSEXP, SEXP NBNSEXP, SEXP ySEXP, SEXP LogPhiSEXP, SEXP LogOneMinusPSEXP, SEXP runif1SEXP, SEXP nlkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Arraylsk(ArraylskSEXP);
    Rcpp::traits::input_parameter< int >::type nloc(nlocSEXP);
    Rcpp::traits::input_parameter< int >::type nspp(nsppSEXP);
    Rcpp::traits::input_parameter< int >::type ncomm(ncommSEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LogPhi(LogPhiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LogOneMinusP(LogOneMinusPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type runif1(runif1SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type nlk(nlkSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleArray(Arraylsk, nloc, nspp, ncomm, NBN, y, LogPhi, LogOneMinusP, runif1, nlk));
    return rcpp_result_gen;
END_RCPP
}
// rmultinom1
IntegerVector rmultinom1(NumericVector runif1, NumericVector prob, int ncommun);
RcppExport SEXP _ldacov_rmultinom1(SEXP runif1SEXP, SEXP probSEXP, SEXP ncommunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type runif1(runif1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type ncommun(ncommunSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom1(runif1, prob, ncommun));
    return rcpp_result_gen;
END_RCPP
}
// samplez
List samplez(NumericMatrix theta, NumericMatrix phi, IntegerMatrix y, int ncommun, int nloc, int nspp, NumericVector zeroes);
RcppExport SEXP _ldacov_samplez(SEXP thetaSEXP, SEXP phiSEXP, SEXP ySEXP, SEXP ncommunSEXP, SEXP nlocSEXP, SEXP nsppSEXP, SEXP zeroesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncommun(ncommunSEXP);
    Rcpp::traits::input_parameter< int >::type nloc(nlocSEXP);
    Rcpp::traits::input_parameter< int >::type nspp(nsppSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeroes(zeroesSEXP);
    rcpp_result_gen = Rcpp::wrap(samplez(theta, phi, y, ncommun, nloc, nspp, zeroes));
    return rcpp_result_gen;
END_RCPP
}
// convertVtoTheta
NumericMatrix convertVtoTheta(NumericMatrix vmat, NumericVector prod);
RcppExport SEXP _ldacov_convertVtoTheta(SEXP vmatSEXP, SEXP prodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type vmat(vmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prod(prodSEXP);
    rcpp_result_gen = Rcpp::wrap(convertVtoTheta(vmat, prod));
    return rcpp_result_gen;
END_RCPP
}
// ngreater
IntegerMatrix ngreater(IntegerMatrix nlk, int nloc, int ncommun);
RcppExport SEXP _ldacov_ngreater(SEXP nlkSEXP, SEXP nlocSEXP, SEXP ncommunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type nlk(nlkSEXP);
    Rcpp::traits::input_parameter< int >::type nloc(nlocSEXP);
    Rcpp::traits::input_parameter< int >::type ncommun(ncommunSEXP);
    rcpp_result_gen = Rcpp::wrap(ngreater(nlk, nloc, ncommun));
    return rcpp_result_gen;
END_RCPP
}
// LogTargetNBN
double LogTargetNBN(NumericMatrix Media, NumericMatrix y, double NBN);
RcppExport SEXP _ldacov_LogTargetNBN(SEXP MediaSEXP, SEXP ySEXP, SEXP NBNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Media(MediaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    rcpp_result_gen = Rcpp::wrap(LogTargetNBN(Media, y, NBN));
    return rcpp_result_gen;
END_RCPP
}
// DoublingNBN
NumericVector DoublingNBN(double yslice, double w, NumericMatrix y, double NBN, NumericMatrix Media, int MaxIter, double LoThresh);
RcppExport SEXP _ldacov_DoublingNBN(SEXP ysliceSEXP, SEXP wSEXP, SEXP ySEXP, SEXP NBNSEXP, SEXP MediaSEXP, SEXP MaxIterSEXP, SEXP LoThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type yslice(ysliceSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Media(MediaSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type LoThresh(LoThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(DoublingNBN(yslice, w, y, NBN, Media, MaxIter, LoThresh));
    return rcpp_result_gen;
END_RCPP
}
// ShrinkAndSample
double ShrinkAndSample(NumericMatrix Media, NumericVector rango1, double yslice, NumericMatrix y, double NBN, int MaxIter, double LoThresh);
RcppExport SEXP _ldacov_ShrinkAndSample(SEXP MediaSEXP, SEXP rango1SEXP, SEXP ysliceSEXP, SEXP ySEXP, SEXP NBNSEXP, SEXP MaxIterSEXP, SEXP LoThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Media(MediaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rango1(rango1SEXP);
    Rcpp::traits::input_parameter< double >::type yslice(ysliceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type LoThresh(LoThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(ShrinkAndSample(Media, rango1, yslice, y, NBN, MaxIter, LoThresh));
    return rcpp_result_gen;
END_RCPP
}
// SampleNBN
double SampleNBN(NumericMatrix Media, NumericMatrix y, double NBN, double w, int MaxIter, double LoThresh);
RcppExport SEXP _ldacov_SampleNBN(SEXP MediaSEXP, SEXP ySEXP, SEXP NBNSEXP, SEXP wSEXP, SEXP MaxIterSEXP, SEXP LoThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Media(MediaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type LoThresh(LoThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleNBN(Media, y, NBN, w, MaxIter, LoThresh));
    return rcpp_result_gen;
END_RCPP
}
// LogTargetBetas
double LogTargetBetas(NumericVector LogMediaMiss, NumericVector param, NumericVector y, NumericMatrix xmat, int target, NumericVector var1, double NBN, double LgammaNBN);
RcppExport SEXP _ldacov_LogTargetBetas(SEXP LogMediaMissSEXP, SEXP paramSEXP, SEXP ySEXP, SEXP xmatSEXP, SEXP targetSEXP, SEXP var1SEXP, SEXP NBNSEXP, SEXP LgammaNBNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type LogMediaMiss(LogMediaMissSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< double >::type LgammaNBN(LgammaNBNSEXP);
    rcpp_result_gen = Rcpp::wrap(LogTargetBetas(LogMediaMiss, param, y, xmat, target, var1, NBN, LgammaNBN));
    return rcpp_result_gen;
END_RCPP
}
// DoublingBetas
NumericVector DoublingBetas(NumericVector LogMediaMiss, double yslice, double w, NumericVector param, NumericVector y, NumericMatrix xmat, int target, NumericVector var1, double NBN, double LgammaNBN, int MaxIter);
RcppExport SEXP _ldacov_DoublingBetas(SEXP LogMediaMissSEXP, SEXP ysliceSEXP, SEXP wSEXP, SEXP paramSEXP, SEXP ySEXP, SEXP xmatSEXP, SEXP targetSEXP, SEXP var1SEXP, SEXP NBNSEXP, SEXP LgammaNBNSEXP, SEXP MaxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type LogMediaMiss(LogMediaMissSEXP);
    Rcpp::traits::input_parameter< double >::type yslice(ysliceSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< double >::type LgammaNBN(LgammaNBNSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(DoublingBetas(LogMediaMiss, yslice, w, param, y, xmat, target, var1, NBN, LgammaNBN, MaxIter));
    return rcpp_result_gen;
END_RCPP
}
// SampleEachParamBetas
double SampleEachParamBetas(NumericVector LogMediaMiss, NumericVector rango1, double yslice, NumericVector param, NumericVector y, NumericMatrix xmat, int target, NumericVector var1, double NBN, int MaxIter, double LoThresh);
RcppExport SEXP _ldacov_SampleEachParamBetas(SEXP LogMediaMissSEXP, SEXP rango1SEXP, SEXP ysliceSEXP, SEXP paramSEXP, SEXP ySEXP, SEXP xmatSEXP, SEXP targetSEXP, SEXP var1SEXP, SEXP NBNSEXP, SEXP MaxIterSEXP, SEXP LoThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type LogMediaMiss(LogMediaMissSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rango1(rango1SEXP);
    Rcpp::traits::input_parameter< double >::type yslice(ysliceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type LoThresh(LoThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleEachParamBetas(LogMediaMiss, rango1, yslice, param, y, xmat, target, var1, NBN, MaxIter, LoThresh));
    return rcpp_result_gen;
END_RCPP
}
// MatrixMultip
NumericVector MatrixMultip(NumericMatrix xmat, NumericVector param, int nparam);
RcppExport SEXP _ldacov_MatrixMultip(SEXP xmatSEXP, SEXP paramSEXP, SEXP nparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nparam(nparamSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixMultip(xmat, param, nparam));
    return rcpp_result_gen;
END_RCPP
}
// SampleBetas
NumericMatrix SampleBetas(NumericMatrix param, NumericMatrix y, NumericMatrix xmat, double w, int nparam, int ncomm, NumericVector var1, double NBN, int MaxIter, double LoThresh);
RcppExport SEXP _ldacov_SampleBetas(SEXP paramSEXP, SEXP ySEXP, SEXP xmatSEXP, SEXP wSEXP, SEXP nparamSEXP, SEXP ncommSEXP, SEXP var1SEXP, SEXP NBNSEXP, SEXP MaxIterSEXP, SEXP LoThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nparam(nparamSEXP);
    Rcpp::traits::input_parameter< int >::type ncomm(ncommSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var1(var1SEXP);
    Rcpp::traits::input_parameter< double >::type NBN(NBNSEXP);
    Rcpp::traits::input_parameter< int >::type MaxIter(MaxIterSEXP);
    Rcpp::traits::input_parameter< double >::type LoThresh(LoThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleBetas(param, y, xmat, w, nparam, ncomm, var1, NBN, MaxIter, LoThresh));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ldacov_whichLessDVPresence", (DL_FUNC) &_ldacov_whichLessDVPresence, 2},
    {"_ldacov_ldmultinom", (DL_FUNC) &_ldacov_ldmultinom, 3},
    {"_ldacov_LogLikMultin", (DL_FUNC) &_ldacov_LogLikMultin, 5},
    {"_ldacov_SampleArray", (DL_FUNC) &_ldacov_SampleArray, 10},
    {"_ldacov_rmultinom1", (DL_FUNC) &_ldacov_rmultinom1, 3},
    {"_ldacov_samplez", (DL_FUNC) &_ldacov_samplez, 7},
    {"_ldacov_convertVtoTheta", (DL_FUNC) &_ldacov_convertVtoTheta, 2},
    {"_ldacov_ngreater", (DL_FUNC) &_ldacov_ngreater, 3},
    {"_ldacov_LogTargetNBN", (DL_FUNC) &_ldacov_LogTargetNBN, 3},
    {"_ldacov_DoublingNBN", (DL_FUNC) &_ldacov_DoublingNBN, 7},
    {"_ldacov_ShrinkAndSample", (DL_FUNC) &_ldacov_ShrinkAndSample, 7},
    {"_ldacov_SampleNBN", (DL_FUNC) &_ldacov_SampleNBN, 6},
    {"_ldacov_LogTargetBetas", (DL_FUNC) &_ldacov_LogTargetBetas, 8},
    {"_ldacov_DoublingBetas", (DL_FUNC) &_ldacov_DoublingBetas, 11},
    {"_ldacov_SampleEachParamBetas", (DL_FUNC) &_ldacov_SampleEachParamBetas, 11},
    {"_ldacov_MatrixMultip", (DL_FUNC) &_ldacov_MatrixMultip, 3},
    {"_ldacov_SampleBetas", (DL_FUNC) &_ldacov_SampleBetas, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_ldacov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
